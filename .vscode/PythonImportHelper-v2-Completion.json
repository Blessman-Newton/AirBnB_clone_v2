[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "getenv",
        "importPath": "os",
        "description": "os",
        "isExtraImport": true,
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "models.base_model",
        "description": "models.base_model",
        "isExtraImport": true,
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "importPath": "models.amenity",
        "description": "models.amenity",
        "isExtraImport": true,
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "City",
        "importPath": "models.city",
        "description": "models.city",
        "isExtraImport": true,
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Place",
        "importPath": "models.place",
        "description": "models.place",
        "isExtraImport": true,
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "Review",
        "importPath": "models.review",
        "description": "models.review",
        "isExtraImport": true,
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "State",
        "importPath": "models.state",
        "description": "models.state",
        "isExtraImport": true,
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "User",
        "importPath": "models.user",
        "description": "models.user",
        "isExtraImport": true,
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "DateTime",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Float",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Integer",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Table",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "Column",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "String",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "scoped_session",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "json",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "json",
        "description": "json",
        "detail": "json",
        "documentation": {}
    },
    {
        "label": "models",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "models",
        "description": "models",
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "storage",
        "importPath": "models",
        "description": "models",
        "isExtraImport": true,
        "detail": "models",
        "documentation": {}
    },
    {
        "label": "uuid4",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "declarative_base",
        "importPath": "sqlalchemy.ext.declarative",
        "description": "sqlalchemy.ext.declarative",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.declarative",
        "documentation": {}
    },
    {
        "label": "unittest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "unittest",
        "description": "unittest",
        "detail": "unittest",
        "documentation": {}
    },
    {
        "label": "pep8",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pep8",
        "description": "pep8",
        "detail": "pep8",
        "documentation": {}
    },
    {
        "label": "MySQLdb",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "MySQLdb",
        "description": "MySQLdb",
        "detail": "MySQLdb",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "isExtraImport": true,
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "isExtraImport": true,
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "patch",
        "importPath": "unittest.mock",
        "description": "unittest.mock",
        "isExtraImport": true,
        "detail": "unittest.mock",
        "documentation": {}
    },
    {
        "label": "StringIO",
        "importPath": "io",
        "description": "io",
        "isExtraImport": true,
        "detail": "io",
        "documentation": {}
    },
    {
        "label": "console",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "console",
        "description": "console",
        "detail": "console",
        "documentation": {}
    },
    {
        "label": "HBNBCommand",
        "importPath": "console",
        "description": "console",
        "isExtraImport": true,
        "detail": "console",
        "documentation": {}
    },
    {
        "label": "tests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "tests",
        "description": "tests",
        "detail": "tests",
        "documentation": {}
    },
    {
        "label": "os.path",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os.path",
        "description": "os.path",
        "detail": "os.path",
        "documentation": {}
    },
    {
        "label": "local",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "env",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "put",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "run",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "env",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "local",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "put",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "run",
        "importPath": "fabric.api",
        "description": "fabric.api",
        "isExtraImport": true,
        "detail": "fabric.api",
        "documentation": {}
    },
    {
        "label": "cmd",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "cmd",
        "description": "cmd",
        "detail": "cmd",
        "documentation": {}
    },
    {
        "label": "split",
        "importPath": "shlex",
        "description": "shlex",
        "isExtraImport": true,
        "detail": "shlex",
        "documentation": {}
    },
    {
        "label": "DBStorage",
        "kind": 6,
        "importPath": "models.engine.db_storage",
        "description": "models.engine.db_storage",
        "peekOfCode": "class DBStorage:\n    \"\"\"Represents a database storage engine.\n    Attributes:\n        __engine (sqlalchemy.Engine): The working SQLAlchemy engine.\n        __session (sqlalchemy.Session): The working SQLAlchemy session.\n    \"\"\"\n    __engine = None\n    __session = None\n    def __init__(self):\n        \"\"\"Initialize a new DBStorage instance.\"\"\"",
        "detail": "models.engine.db_storage",
        "documentation": {}
    },
    {
        "label": "FileStorage",
        "kind": 6,
        "importPath": "models.engine.file_storage",
        "description": "models.engine.file_storage",
        "peekOfCode": "class FileStorage:\n    \"\"\"Represent an abstracted storage engine.\n    Attributes:\n        __file_path (str): The name of the file to save objects to.\n        __objects (dict): A dictionary of instantiated objects.\n    \"\"\"\n    __file_path = \"file.json\"\n    __objects = {}\n    def all(self, cls=None):\n        \"\"\"Return a dictionary of instantiated objects in __objects.",
        "detail": "models.engine.file_storage",
        "documentation": {}
    },
    {
        "label": "Amenity",
        "kind": 6,
        "importPath": "models.amenity",
        "description": "models.amenity",
        "peekOfCode": "class Amenity(BaseModel, Base):\n    \"\"\"Represents an Amenity for a MySQL database.\n    Inherits from SQLAlchemy Base and links to the MySQL table amenities.\n    Attributes:\n        __tablename__ (str): The name of the MySQL table to store Amenities.\n        name (sqlalchemy String): The amenity name.\n        place_amenities (sqlalchemy relationship): Place-Amenity relationship.\n    \"\"\"\n    __tablename__ = \"amenities\"\n    name = Column(String(128), nullable=False)",
        "detail": "models.amenity",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "kind": 6,
        "importPath": "models.base_model",
        "description": "models.base_model",
        "peekOfCode": "class BaseModel:\n    \"\"\"Defines the BaseModel class.\n    Attributes:\n        id (sqlalchemy String): The BaseModel id.\n        created_at (sqlalchemy DateTime): The datetime at creation.\n        updated_at (sqlalchemy DateTime): The datetime of last update.\n    \"\"\"\n    id = Column(String(60), primary_key=True, nullable=False)\n    created_at = Column(DateTime, nullable=False, default=datetime.utcnow())\n    updated_at = Column(DateTime, nullable=False, default=datetime.utcnow())",
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "Base",
        "kind": 5,
        "importPath": "models.base_model",
        "description": "models.base_model",
        "peekOfCode": "Base = declarative_base()\nclass BaseModel:\n    \"\"\"Defines the BaseModel class.\n    Attributes:\n        id (sqlalchemy String): The BaseModel id.\n        created_at (sqlalchemy DateTime): The datetime at creation.\n        updated_at (sqlalchemy DateTime): The datetime of last update.\n    \"\"\"\n    id = Column(String(60), primary_key=True, nullable=False)\n    created_at = Column(DateTime, nullable=False, default=datetime.utcnow())",
        "detail": "models.base_model",
        "documentation": {}
    },
    {
        "label": "City",
        "kind": 6,
        "importPath": "models.city",
        "description": "models.city",
        "peekOfCode": "class City(BaseModel, Base):\n    \"\"\"Represents a city for a MySQL database.\n    Inherits from SQLAlchemy Base and links to the MySQL table cities.\n    Attributes:\n        __tablename__ (str): The name of the MySQL table to store Cities.\n        name (sqlalchemy String): The name of the City.\n        state_id (sqlalchemy String): The state id of the City.\n    \"\"\"\n    __tablename__ = \"cities\"\n    name = Column(String(128), nullable=False)",
        "detail": "models.city",
        "documentation": {}
    },
    {
        "label": "Place",
        "kind": 6,
        "importPath": "models.place",
        "description": "models.place",
        "peekOfCode": "class Place(BaseModel, Base):\n    \"\"\"Represents a Place for a MySQL database.\n    Inherits from SQLAlchemy Base and links to the MySQL table places.\n    Attributes:\n        __tablename__ (str): The name of the MySQL table to store places.\n        city_id (sqlalchemy String): The place's city id.\n        user_id (sqlalchemy String): The place's user id.\n        name (sqlalchemy String): The name.\n        description (sqlalchemy String): The description.\n        number_rooms (sqlalchemy Integer): The number of rooms.",
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "association_table",
        "kind": 5,
        "importPath": "models.place",
        "description": "models.place",
        "peekOfCode": "association_table = Table(\"place_amenity\", Base.metadata,\n                          Column(\"place_id\", String(60),\n                                 ForeignKey(\"places.id\"),\n                                 primary_key=True, nullable=False),\n                          Column(\"amenity_id\", String(60),\n                                 ForeignKey(\"amenities.id\"),\n                                 primary_key=True, nullable=False))\nclass Place(BaseModel, Base):\n    \"\"\"Represents a Place for a MySQL database.\n    Inherits from SQLAlchemy Base and links to the MySQL table places.",
        "detail": "models.place",
        "documentation": {}
    },
    {
        "label": "Review",
        "kind": 6,
        "importPath": "models.review",
        "description": "models.review",
        "peekOfCode": "class Review(BaseModel, Base):\n    \"\"\"Represents a review for a MySQL database.\n    Inherits from SQLAlchemy Base and links to the MySQL table reviews.\n    Attributes:\n        __tablename__ (str): The name of the MySQL table to store Reviews.\n        text (sqlalchemy String): The review description.\n        place_id (sqlalchemy String): The review's place id.\n        user_id (sqlalchemy String): The review's user id.\n    \"\"\"\n    __tablename__ = \"reviews\"",
        "detail": "models.review",
        "documentation": {}
    },
    {
        "label": "State",
        "kind": 6,
        "importPath": "models.state",
        "description": "models.state",
        "peekOfCode": "class State(BaseModel, Base):\n    \"\"\"Represents a state for a MySQL database.\n    Inherits from SQLAlchemy Base and links to the MySQL table states.\n    Attributes:\n        __tablename__ (str): The name of the MySQL table to store States.\n        name (sqlalchemy String): The name of the State.\n        cities (sqlalchemy relationship): The State-City relationship.\n    \"\"\"\n    __tablename__ = \"states\"\n    name = Column(String(128), nullable=False)",
        "detail": "models.state",
        "documentation": {}
    },
    {
        "label": "User",
        "kind": 6,
        "importPath": "models.user",
        "description": "models.user",
        "peekOfCode": "class User(BaseModel, Base):\n    \"\"\"Represents a user for a MySQL database.\n    Inherits from SQLAlchemy Base and links to the MySQL table users.\n    Attributes:\n        __tablename__ (str): The name of the MySQL table to store users.\n        email: (sqlalchemy String): The user's email address.\n        password (sqlalchemy String): The user's password.\n        first_name (sqlalchemy String): The user's first name.\n        last_name (sqlalchemy String): The user's last name.\n        places (sqlalchemy relationship): The User-Place relationship.",
        "detail": "models.user",
        "documentation": {}
    },
    {
        "label": "TestDBStorage",
        "kind": 6,
        "importPath": "tests.test_models.test_engine.test_db_storage",
        "description": "tests.test_models.test_engine.test_db_storage",
        "peekOfCode": "class TestDBStorage(unittest.TestCase):\n    '''this will test the DBStorage'''\n    @classmethod\n    def setUpClass(self):\n        \"\"\"set up for test\"\"\"\n        self.User = getenv(\"HBNB_MYSQL_USER\")\n        self.Passwd = getenv(\"HBNB_MYSQL_PWD\")\n        self.Db = getenv(\"HBNB_MYSQL_DB\")\n        self.Host = getenv(\"HBNB_MYSQL_HOST\")\n        self.db = MySQLdb.connect(host=self.Host, user=self.User,",
        "detail": "tests.test_models.test_engine.test_db_storage",
        "documentation": {}
    },
    {
        "label": "TestFileStorage",
        "kind": 6,
        "importPath": "tests.test_models.test_engine.test_file_storage",
        "description": "tests.test_models.test_engine.test_file_storage",
        "peekOfCode": "class TestFileStorage(unittest.TestCase):\n    '''this will test the FileStorage'''\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"set up for test\"\"\"\n        cls.user = User()\n        cls.user.first_name = \"Kev\"\n        cls.user.last_name = \"Yo\"\n        cls.user.email = \"1234@yahoo.com\"\n        cls.storage = FileStorage()",
        "detail": "tests.test_models.test_engine.test_file_storage",
        "documentation": {}
    },
    {
        "label": "TestAmenity",
        "kind": 6,
        "importPath": "tests.test_models.test_amenity",
        "description": "tests.test_models.test_amenity",
        "peekOfCode": "class TestAmenity(unittest.TestCase):\n    \"\"\"this will test the Amenity class\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"set up for test\"\"\"\n        cls.amenity = Amenity()\n        cls.amenity.name = \"Breakfast\"\n    @classmethod\n    def teardown(cls):\n        \"\"\"at the end of the test this will tear it down\"\"\"",
        "detail": "tests.test_models.test_amenity",
        "documentation": {}
    },
    {
        "label": "TestBaseModel",
        "kind": 6,
        "importPath": "tests.test_models.test_base_model",
        "description": "tests.test_models.test_base_model",
        "peekOfCode": "class TestBaseModel(unittest.TestCase):\n    \"\"\"this will test the base model class\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"setup for the test\"\"\"\n        cls.base = BaseModel()\n        cls.base.name = \"Kev\"\n        cls.base.num = 20\n    @classmethod\n    def teardown(cls):",
        "detail": "tests.test_models.test_base_model",
        "documentation": {}
    },
    {
        "label": "TestCity",
        "kind": 6,
        "importPath": "tests.test_models.test_city",
        "description": "tests.test_models.test_city",
        "peekOfCode": "class TestCity(unittest.TestCase):\n    \"\"\"this will test the city class\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"set up for test\"\"\"\n        cls.city = City()\n        cls.city.name = \"LA\"\n        cls.city.state_id = \"CA\"\n    @classmethod\n    def teardown(cls):",
        "detail": "tests.test_models.test_city",
        "documentation": {}
    },
    {
        "label": "TestPlace",
        "kind": 6,
        "importPath": "tests.test_models.test_place",
        "description": "tests.test_models.test_place",
        "peekOfCode": "class TestPlace(unittest.TestCase):\n    \"\"\"this will test the place class\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"set up for test\"\"\"\n        cls.place = Place()\n        cls.place.city_id = \"1234-abcd\"\n        cls.place.user_id = \"4321-dcba\"\n        cls.place.name = \"Death Star\"\n        cls.place.description = \"UNLIMITED POWER!!!!!\"",
        "detail": "tests.test_models.test_place",
        "documentation": {}
    },
    {
        "label": "TestReview",
        "kind": 6,
        "importPath": "tests.test_models.test_review",
        "description": "tests.test_models.test_review",
        "peekOfCode": "class TestReview(unittest.TestCase):\n    \"\"\"this will test the place class\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"set up for test\"\"\"\n        cls.rev = Review()\n        cls.rev.place_id = \"4321-dcba\"\n        cls.rev.user_id = \"123-bca\"\n        cls.rev.text = \"The srongest in the Galaxy\"\n    @classmethod",
        "detail": "tests.test_models.test_review",
        "documentation": {}
    },
    {
        "label": "TestState",
        "kind": 6,
        "importPath": "tests.test_models.test_state",
        "description": "tests.test_models.test_state",
        "peekOfCode": "class TestState(unittest.TestCase):\n    \"\"\"this will test the State class\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"set up for test\"\"\"\n        cls.state = State()\n        cls.state.name = \"CA\"\n    @classmethod\n    def teardown(cls):\n        \"\"\"at the end of the test this will tear it down\"\"\"",
        "detail": "tests.test_models.test_state",
        "documentation": {}
    },
    {
        "label": "TestUser",
        "kind": 6,
        "importPath": "tests.test_models.test_user",
        "description": "tests.test_models.test_user",
        "peekOfCode": "class TestUser(unittest.TestCase):\n    \"\"\"this will test the User class\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"set up for test\"\"\"\n        cls.user = User()\n        cls.user.first_name = \"Kevin\"\n        cls.user.last_name = \"Yook\"\n        cls.user.email = \"yook00627@gmamil.com\"\n        cls.user.password = \"secret\"",
        "detail": "tests.test_models.test_user",
        "documentation": {}
    },
    {
        "label": "TestConsole",
        "kind": 6,
        "importPath": "tests.test_console",
        "description": "tests.test_console",
        "peekOfCode": "class TestConsole(unittest.TestCase):\n    \"\"\"this will test the console\"\"\"\n    @classmethod\n    def setUpClass(cls):\n        \"\"\"setup for the test\"\"\"\n        cls.consol = HBNBCommand()\n    @classmethod\n    def teardown(cls):\n        \"\"\"at the end of the test this will tear it down\"\"\"\n        del cls.consol",
        "detail": "tests.test_console",
        "documentation": {}
    },
    {
        "label": "do_pack",
        "kind": 2,
        "importPath": "1-pack_web_static",
        "description": "1-pack_web_static",
        "peekOfCode": "def do_pack():\n    \"\"\"Create a tar gzipped archive of the directory web_static.\"\"\"\n    dt = datetime.utcnow()\n    file = \"versions/web_static_{}{}{}{}{}{}.tgz\".format(dt.year,\n                                                         dt.month,\n                                                         dt.day,\n                                                         dt.hour,\n                                                         dt.minute,\n                                                         dt.second)\n    if os.path.isdir(\"versions\") is False:",
        "detail": "1-pack_web_static",
        "documentation": {}
    },
    {
        "label": "do_clean",
        "kind": 2,
        "importPath": "100-clean_web_static",
        "description": "100-clean_web_static",
        "peekOfCode": "def do_clean(number=0):\n    \"\"\"Delete out-of-date archives.\n    Args:\n        number (int): The number of archives to keep.\n    If number is 0 or 1, keeps only the most recent archive. If\n    number is 2, keeps the most and second-most recent archives,\n    etc.\n    \"\"\"\n    number = 1 if int(number) == 0 else int(number)\n    archives = sorted(os.listdir(\"versions\"))",
        "detail": "100-clean_web_static",
        "documentation": {}
    },
    {
        "label": "env.hosts",
        "kind": 5,
        "importPath": "100-clean_web_static",
        "description": "100-clean_web_static",
        "peekOfCode": "env.hosts = [\"54.160.85.72\", \"35.175.132.106\"]\ndef do_clean(number=0):\n    \"\"\"Delete out-of-date archives.\n    Args:\n        number (int): The number of archives to keep.\n    If number is 0 or 1, keeps only the most recent archive. If\n    number is 2, keeps the most and second-most recent archives,\n    etc.\n    \"\"\"\n    number = 1 if int(number) == 0 else int(number)",
        "detail": "100-clean_web_static",
        "documentation": {}
    },
    {
        "label": "do_deploy",
        "kind": 2,
        "importPath": "2-do_deploy_web_static",
        "description": "2-do_deploy_web_static",
        "peekOfCode": "def do_deploy(archive_path):\n    \"\"\"Distributes an archive to a web server.\n    Args:\n        archive_path (str): The path of the archive to distribute.\n    Returns:\n        If the file doesn't exist at archive_path or an error occurs - False.\n        Otherwise - True.\n    \"\"\"\n    if os.path.isfile(archive_path) is False:\n        return False",
        "detail": "2-do_deploy_web_static",
        "documentation": {}
    },
    {
        "label": "env.hosts",
        "kind": 5,
        "importPath": "2-do_deploy_web_static",
        "description": "2-do_deploy_web_static",
        "peekOfCode": "env.hosts = [\"54.160.85.72\", \"35.175.132.106\"]\ndef do_deploy(archive_path):\n    \"\"\"Distributes an archive to a web server.\n    Args:\n        archive_path (str): The path of the archive to distribute.\n    Returns:\n        If the file doesn't exist at archive_path or an error occurs - False.\n        Otherwise - True.\n    \"\"\"\n    if os.path.isfile(archive_path) is False:",
        "detail": "2-do_deploy_web_static",
        "documentation": {}
    },
    {
        "label": "do_pack",
        "kind": 2,
        "importPath": "3-deploy_web_static",
        "description": "3-deploy_web_static",
        "peekOfCode": "def do_pack():\n    \"\"\"Create a tar gzipped archive of the directory web_static.\"\"\"\n    dt = datetime.utcnow()\n    file = \"versions/web_static_{}{}{}{}{}{}.tgz\".format(dt.year,\n                                                         dt.month,\n                                                         dt.day,\n                                                         dt.hour,\n                                                         dt.minute,\n                                                         dt.second)\n    if os.path.isdir(\"versions\") is False:",
        "detail": "3-deploy_web_static",
        "documentation": {}
    },
    {
        "label": "do_deploy",
        "kind": 2,
        "importPath": "3-deploy_web_static",
        "description": "3-deploy_web_static",
        "peekOfCode": "def do_deploy(archive_path):\n    \"\"\"Distributes an archive to a web server.\n    Args:\n        archive_path (str): The path of the archive to distribute.\n    Returns:\n        If the file doesn't exist at archive_path or an error occurs - False.\n        Otherwise - True.\n    \"\"\"\n    if os.path.isfile(archive_path) is False:\n        return False",
        "detail": "3-deploy_web_static",
        "documentation": {}
    },
    {
        "label": "deploy",
        "kind": 2,
        "importPath": "3-deploy_web_static",
        "description": "3-deploy_web_static",
        "peekOfCode": "def deploy():\n    \"\"\"Create and distribute an archive to a web server.\"\"\"\n    file = do_pack()\n    if file is None:\n        return False\n    return do_deploy(file)",
        "detail": "3-deploy_web_static",
        "documentation": {}
    },
    {
        "label": "env.hosts",
        "kind": 5,
        "importPath": "3-deploy_web_static",
        "description": "3-deploy_web_static",
        "peekOfCode": "env.hosts = [\"54.160.85.72\", \"35.175.132.106\"]\ndef do_pack():\n    \"\"\"Create a tar gzipped archive of the directory web_static.\"\"\"\n    dt = datetime.utcnow()\n    file = \"versions/web_static_{}{}{}{}{}{}.tgz\".format(dt.year,\n                                                         dt.month,\n                                                         dt.day,\n                                                         dt.hour,\n                                                         dt.minute,\n                                                         dt.second)",
        "detail": "3-deploy_web_static",
        "documentation": {}
    },
    {
        "label": "HBNBCommand",
        "kind": 6,
        "importPath": "console",
        "description": "console",
        "peekOfCode": "class HBNBCommand(cmd.Cmd):\n    \"\"\"Defines the HolbertonBnB command interpreter.\"\"\"\n    prompt = \"(hbnb) \"\n    __classes = {\n        \"BaseModel\",\n        \"User\",\n        \"State\",\n        \"City\",\n        \"Amenity\",\n        \"Place\",",
        "detail": "console",
        "documentation": {}
    }
]